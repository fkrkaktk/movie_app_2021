{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","idx","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"+RAiCeA,MA1Bf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,sBAAKC,UAAU,QAAf,UAEE,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UAEE,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAEjC,oBAAIK,UAAU,gBAAd,SAA+BD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OAAgB,oBAAcL,UAAU,gBAAxB,SAAyCI,GAAhCC,QAC/D,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCFFC,G,kNACJC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAQAC,IAAMC,IACd,4DATQ,gBAMEJ,EANF,EAKRK,KACEA,KAAQL,OAKZM,QAAQC,IAAIP,GAIZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAfzB,2C,uDAkBZ,WAIEU,KAAKR,c,oBAGP,WACE,MAA8BQ,KAAKX,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAEnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACIU,EAAOP,KACT,SACEiB,GADF,OAGE,cAAC,EAAD,CAGEC,GAAID,EAAMC,GACV1B,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAME,mBACdvB,OAAQqB,EAAMrB,QANTqB,EAAMC,e,GAhDTE,IAAMC,YAgETjB,IC3EfkB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.7f34a209.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// 컴포넌트가 state를 필요로 하지않는다면 class컴포넌트일 필요가 없다.\r\n// function componenet로 만들어도 충분!!!\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      {/* alt는 그림에 마우스 올렸을때 뜨는 설명이다. 시각장애인들을 위한것 */}\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n\t\t\t\t{/* 자바스크립트에서 스타일을 쓸려면 style={{}} 를 쓰면됨 */}\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n\t\t\t\t{/* map을 쓰게될 경우 key를 필요로 하지만 map에서 이렇게 idx칸을 만들어서 줘도 됨(idx는 번호임) */}\r\n\t\t\t\t<ul className=\"movie__genres\">{genres.map((genre, idx) => <li key={idx} className=\"genres__genre\">{genre}</li>)}</ul>\r\n        <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n\tgenres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\n// npm i axios\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n// npm i gh-pages\n// gh-pages는 github에서 나에게 무료 웹사이트를 제공한것을 사용할수있게 업로드시켜줌\n// 1) package.json에 아래와같은것을 추가\n// \"homepage\" : \"https://(내 깃허브 username).github.io/(깃허브에 등록된 프로젝트명)\"\n// 여기서 유저네임이랑 프로젝트명은 전부 소문자여야함\n// 1.5) npm run build 를 하면 build폴더가 생성됨\n// 2) scripts부분에 \"deploy\": \"gh-pages -d build\" 추가(build 폴더를 업로드하는것)(-d는 디렉토리라는뜻 build 자리엔 폴더명을 넣으면됨)\n// 3) scripts부분에 \"predeploy\": \"npm run build\" 추가(deploy를 호출할때마다 predeploy를 먼저 호출함)\n// https://june.github.io/movie_app_2021\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  getMovies = async () => {\n    // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    // console.log(movies.data.data.movies);\n    // 콘솔찍을때 저렇게 찍는건 좋지않음. ES6 문법을 활용하자\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\"\n    );\n    console.log(movies);\n    // this.setState({movies:movies});\n    // 우린 최신 자바스크립트를 쓰기때문에 이것또한 짧아져야함\n    // this.setState({movies}); //이렇게 짧게 쓸수 있음\n    this.setState({ movies, isLoading: false });\n  };\n\n  componentDidMount() {\n    // setTimeout(() => { //timeout은 JS문법임\n    //   this.setState({isLoading : false});\n    // }, 6000); //6초뒤에 isLoading을 false로 전환\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state; //매번 this.state.isLoading을 하지않기 위해 사용한 ES6 문법\n    // JS문법 삼항연산자 : 조건 ? \"참일때 나올값\" : \"거짓일때 나올값\"\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            { movies.map(\n            (\n              movie //map을 쓰면 항상 return을 해야하지만 이렇게 바꾸면 안해도됨\n            ) => (\n              <Movie\n                // map은 key를 정해주지않으면 오류발생(하지만 작동은함)\n                key={movie.id} //키는 unique해야한다. 그래서 뭐... id준듯(이건 json에서 정해서 온게 아니라 우리가 정한것 다른것해도됨)\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n\n// : movies.map((movie) => {\n//     console.log(movie);\n//     // map을 쓰면 항상 return 해줘야함\n//     return (\n//       <Movie\n//         id={movie.id}\n//         year={movie.year}\n//         title={movie.title}\n//         summary={movie.summary}\n//         poster={movie.medium_cover_image}\n//       />\n//     );\n//   })}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}